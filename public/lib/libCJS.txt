export async function getEachResult(imageArrayObj) {
  console.log('getEachResults ', imageArrayObj);

  // Set up canvas and context for image processing
  const canvasElement = document.getElementById('canvas');
  canvasElement.height = imageArrayObj.height;
  canvasElement.width = imageArrayObj.width;
  const canvasContext = canvasElement.getContext('2d', { willReadFrequently: true });
  // Put the image data on the canvas
  canvasContext.putImageData(imageArrayObj, 0, 0);
  // Obtain the image as a blob
  const imageBlob = await new Promise((resolve) => canvasElement.toBlob(resolve, 'image/png'));
  // Create a FormData object and append the image blob to it
  const formData = new FormData();
  formData.append('imageFile', imageBlob, 'image.png');



  // Obtain image data source as a data URL
  const imageDataSource = canvasElement.toDataURL(); // Not imageData (?)

  // Fetch prediction endpoint details from the server
  const azdata = await (await fetch('/azenv')).json();

  const requestBody = {
    tag: {
      key:azdata.predictionKey, 
      endpoint:azdata.predictionEndpoint
      },
    imageData: formData,
  };
  
  try {
    // Send the image and tag data to the backend
    const response = await fetch('/uploadImage', {
      method: 'POST',
      body: JSON.stringify(requestBody), // Send the merged object as JSON string
      headers: {
        'Content-Type': 'application/json',
      },
    });
  
    // Handle the response from the server (saved image URI)
    const data = await response.json();

  // // Send the image for prediction to the prediction endpoint
  // const response = await fetch('/capture', {
  //   method: 'POST',
  //   body: JSON.stringify({
  //     tag: {
  //       endpoint: azdata.predictionEndpoint,
  //       key: azdata.predictionKey,
  //     },
  //     imageData: formData 
  //   }),
  //   headers: {
  //     'Content-Type': 'application/json',
  //   },
  // });

  // const bestPredict = await response.json();

  // console.log('libB.js 从Azure 得到的预测 result ', bestPredict);

  // // Prepare the showTag object with the prediction details and image source
  // const showTagObj = {
  //   tag: bestPredict.tag,
  //   probability: bestPredict.probability,
  //   image: imageDataSource, // Add the image source to the showTag output
  //   boundingBox: bestPredict.boundingBox,
  // };
  const showTagObj=[];

  // Set a timeout to update UI and display the showTag result
  setTimeout(() => {
    console.log('UI Update with showTagObj', showTagObj);
  }, 200);

  return showTagObj;
}